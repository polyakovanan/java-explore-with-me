{
	"info": {
		"_postman_id": "6852c4b1-31a6-437e-a32d-aed83d61d0c8",
		"name": "Test Explore With Me - Feature subscription",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40691958"
	},
	"item": [
		{
			"name": "Подписка",
			"item": [
				{
					"name": "Добавление новой подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
									"    pm.response.to.have.status(201);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"{{iid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление дубликата подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id)\r",
									"        const sub = await api.addSubscription(user.id, initiator.id)\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
									"    pm.response.to.have.status(409);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"{{iid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Подписка несуществующим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"uid\", 999)\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"{{iid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Подписка на несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"iid\", 999)\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"{{iid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Отписка",
			"item": [
				{
					"name": "Отмена подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id)\r",
									"        const sub = await api.addSubscription(user.id, initiator.id)\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/{{iid}}/cancel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"{{iid}}",
								"cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена несуществующей подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id)\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/{{iid}}/cancel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"{{iid}}",
								"cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена подписки несуществующим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"uid\", 999)\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/{{iid}}/cancel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"{{iid}}",
								"cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Отмена подписки на несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"iid\", 999)\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/{{iid}}/cancel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"{{iid}}",
								"cancel"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Удаление подписчика",
			"item": [
				{
					"name": "Удаление подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id)\r",
									"        const sub = await api.addSubscription(user.id, initiator.id)\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{iid}}/subscriptions/{{uid}}/remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{iid}}",
								"subscriptions",
								"{{uid}}",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление несуществующей подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id)\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{iid}}/subscriptions/{{uid}}/remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{iid}}",
								"subscriptions",
								"{{uid}}",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление подписки несуществующим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"uid\", 999)\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{iid}}/subscriptions/{{uid}}/remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{iid}}",
								"subscriptions",
								"{{uid}}",
								"remove"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление несуществующего подписчика",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"iid\", 999)\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{iid}}/subscriptions/{{uid}}/remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{iid}}",
								"subscriptions",
								"{{uid}}",
								"remove"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Список подписок",
			"item": [
				{
					"name": "Пустой список без подписок",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должен быть пустой список подписок\", function () {\r",
									"    pm.expect(target.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Подписки несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"uid\", 999)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Корректный список подписок",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const initiator1 = await api.addUser(rnd.getUser());\r",
									"        const initiator2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator2.id);\r",
									"        await api.addSubscription(user.id, initiator2.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const iid = parseInt(pm.collectionVariables.get(\"iid\"));\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, subscribers\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('name');\r",
									"    pm.expect(target[0]).to.have.property('subscribers');\r",
									"});\r",
									"\r",
									"pm.test(\"Должна быть только одна подписка\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target[0].id).eql(iid);\r",
									"});\r",
									"\r",
									"pm.test(\"У пользователя должен быть только 1 подписчик\", function () {\r",
									"    pm.expect(target[0].subscribers).eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Список подписчиков",
			"item": [
				{
					"name": "Пустой список подписчиков",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должен быть пустой список подписок\", function () {\r",
									"    pm.expect(target.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"subscribers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Подписчики несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"uid\", 999)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"subscribers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Корректный список подписчиков",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const user2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user2.id);\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id);\r",
									"        await api.addSubscription(user2.id, initiator.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const uid = parseInt(pm.collectionVariables.get(\"uid\"));\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, subscribers\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('name');\r",
									"    pm.expect(target[0]).to.have.property('subscribers');\r",
									"});\r",
									"\r",
									"pm.test(\"Должна быть только одна подписка\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target[0].id).equal(uid);\r",
									"});\r",
									"\r",
									"pm.test(\"У подписчика не должно быть подписчиков\", function () {\r",
									"    pm.expect(target[0].subscribers).equal(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{iid}}/subscriptions/subscribers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{iid}}",
								"subscriptions",
								"subscribers"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "События по подпискам",
			"item": [
				{
					"name": "Пустой список событий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должен быть пустой список подписок\", function () {\r",
									"    pm.expect(target.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Список событий несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"uid\", 999)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Корректный порядок событий в списке",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let event;\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const initiator1 = await api.addUser(rnd.getUser());\r",
									"        const initiator2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator2.id);\r",
									"        await api.addSubscription(user.id, initiator2.id);\r",
									" \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        \r",
									"        event = await api.addEvent(initiator1.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid1\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid2\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        event = rnd.getEvent(category.id);\r",
									"        event.eventDate = rnd.getFutureDateTime(10, 0, 0);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, event);\r",
									"        pm.collectionVariables.set(\"eid3\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const eid3 = parseInt(pm.collectionVariables.get(\"eid3\"));\r",
									"const eid2 = parseInt(pm.collectionVariables.get(\"eid2\"));\r",
									"\r",
									"pm.test(\"Должно быть 2 события в списке\", function () {\r",
									"    pm.expect(target.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('title');\r",
									"pm.expect(target[0]).to.have.property('annotation');\r",
									"pm.expect(target[0]).to.have.property('category');\r",
									"pm.expect(target[0]).to.have.property('paid');\r",
									"pm.expect(target[0]).to.have.property('eventDate');\r",
									"pm.expect(target[0]).to.have.property('initiator');\r",
									"pm.expect(target[0]).to.have.property('views');\r",
									"pm.expect(target[0]).to.have.property('confirmedRequests');\r",
									"});\r",
									"\r",
									"pm.test(\"События должны быть в порядке убывания даты\", function () {\r",
									"pm.expect(target[0].id).eql(eid3);\r",
									"pm.expect(target[1].id).eql(eid2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Только опубликованные события в списке",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let event;\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const initiator1 = await api.addUser(rnd.getUser());\r",
									"        const initiator2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator2.id);\r",
									"        await api.addSubscription(user.id, initiator2.id);\r",
									" \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        \r",
									"        event = await api.addEvent(initiator1.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid1\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid2\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        event = await api.addEvent(initiator2.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid3\", event.id);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const eid2 = parseInt(pm.collectionVariables.get(\"eid2\"));\r",
									"\r",
									"pm.test(\"Должно быть 1 событие в списке\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('title');\r",
									"pm.expect(target[0]).to.have.property('annotation');\r",
									"pm.expect(target[0]).to.have.property('category');\r",
									"pm.expect(target[0]).to.have.property('paid');\r",
									"pm.expect(target[0]).to.have.property('eventDate');\r",
									"pm.expect(target[0]).to.have.property('initiator');\r",
									"pm.expect(target[0]).to.have.property('views');\r",
									"pm.expect(target[0]).to.have.property('confirmedRequests');\r",
									"});\r",
									"\r",
									"pm.test(\"События должны быть в порядке убывания даты\", function () {\r",
									"pm.expect(target[0].id).eql(eid2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Корректный список с параметрами пагинации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let event;\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const initiator1 = await api.addUser(rnd.getUser());\r",
									"        const initiator2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator2.id);\r",
									"        await api.addSubscription(user.id, initiator2.id);\r",
									" \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        \r",
									"        event = await api.addEvent(initiator1.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid1\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid2\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        event = rnd.getEvent(category.id);\r",
									"        event.eventDate = rnd.getFutureDateTime(10, 0, 0);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, event);\r",
									"        pm.collectionVariables.set(\"eid3\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const eid3 = parseInt(pm.collectionVariables.get(\"eid3\"));\r",
									"\r",
									"pm.test(\"Должно быть 1 событие в списке\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('title');\r",
									"pm.expect(target[0]).to.have.property('annotation');\r",
									"pm.expect(target[0]).to.have.property('category');\r",
									"pm.expect(target[0]).to.have.property('paid');\r",
									"pm.expect(target[0]).to.have.property('eventDate');\r",
									"pm.expect(target[0]).to.have.property('initiator');\r",
									"pm.expect(target[0]).to.have.property('views');\r",
									"pm.expect(target[0]).to.have.property('confirmedRequests');\r",
									"});\r",
									"\r",
									"pm.test(\"События должны быть в порядке убывания даты\", function () {\r",
									"pm.expect(target[0].id).eql(eid3);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events?from=0&size=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "События по подпискам на пользователя",
			"item": [
				{
					"name": "Пустой список событий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id);\r",
									"        await api.addSubscription(user.id, initiator.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должен быть пустой список подписок\", function () {\r",
									"    pm.expect(target.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events",
								"{{iid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Список событий несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"uid\", 999);\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events",
								"{{iid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Список событий от несуществующего пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        pm.collectionVariables.set(\"iid\", 999);\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events",
								"{{iid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Список событий без подписки на пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
									"    pm.response.to.have.status(409);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events",
								"{{iid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Корректный порядок событий в списке",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let event;\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const initiator1 = await api.addUser(rnd.getUser());\r",
									"        const initiator2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator2.id);\r",
									"        await api.addSubscription(user.id, initiator1.id);\r",
									"        await api.addSubscription(user.id, initiator2.id);\r",
									" \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        \r",
									"        event = await api.addEvent(initiator1.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid1\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid2\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        event = rnd.getEvent(category.id);\r",
									"        event.eventDate = rnd.getFutureDateTime(10, 0, 0);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, event);\r",
									"        pm.collectionVariables.set(\"eid3\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const eid2 = parseInt(pm.collectionVariables.get(\"eid2\"));\r",
									"const eid3 = parseInt(pm.collectionVariables.get(\"eid3\"));\r",
									"\r",
									"pm.test(\"Должно быть 2 события в списке\", function () {\r",
									"    pm.expect(target.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('title');\r",
									"pm.expect(target[0]).to.have.property('annotation');\r",
									"pm.expect(target[0]).to.have.property('category');\r",
									"pm.expect(target[0]).to.have.property('paid');\r",
									"pm.expect(target[0]).to.have.property('eventDate');\r",
									"pm.expect(target[0]).to.have.property('initiator');\r",
									"pm.expect(target[0]).to.have.property('views');\r",
									"pm.expect(target[0]).to.have.property('confirmedRequests');\r",
									"});\r",
									"\r",
									"pm.test(\"События должны быть в порядке убывания даты\", function () {\r",
									"pm.expect(target[0].id).eql(eid3);\r",
									"pm.expect(target[1].id).eql(eid2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events",
								"{{iid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Только опубликованные события в списке",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let event;\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const initiator1 = await api.addUser(rnd.getUser());\r",
									"        const initiator2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator2.id);\r",
									"        await api.addSubscription(user.id, initiator1.id);\r",
									"        await api.addSubscription(user.id, initiator2.id);\r",
									" \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        \r",
									"        event = await api.addEvent(initiator1.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid1\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid2\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        event = await api.addEvent(initiator2.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid3\", event.id);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const eid2 = parseInt(pm.collectionVariables.get(\"eid2\"));\r",
									"\r",
									"pm.test(\"Должно быть 1 событие в списке\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('title');\r",
									"pm.expect(target[0]).to.have.property('annotation');\r",
									"pm.expect(target[0]).to.have.property('category');\r",
									"pm.expect(target[0]).to.have.property('paid');\r",
									"pm.expect(target[0]).to.have.property('eventDate');\r",
									"pm.expect(target[0]).to.have.property('initiator');\r",
									"pm.expect(target[0]).to.have.property('views');\r",
									"pm.expect(target[0]).to.have.property('confirmedRequests');\r",
									"});\r",
									"\r",
									"pm.test(\"События должны быть в порядке убывания даты\", function () {\r",
									"pm.expect(target[0].id).eql(eid2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events/{{iid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events",
								"{{iid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Корректный список с параметрами пагинации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let event;\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const initiator1 = await api.addUser(rnd.getUser());\r",
									"        const initiator2 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"iid\", initiator2.id);\r",
									"        await api.addSubscription(user.id, initiator1.id);\r",
									"        await api.addSubscription(user.id, initiator2.id);\r",
									" \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        \r",
									"        event = await api.addEvent(initiator1.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid1\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, rnd.getEvent(category.id))\r",
									"        pm.collectionVariables.set(\"eid2\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"        event = rnd.getEvent(category.id);\r",
									"        event.eventDate = rnd.getFutureDateTime(10, 0, 0);\r",
									"\r",
									"        event = await api.addEvent(initiator2.id, event);\r",
									"        pm.collectionVariables.set(\"eid3\", event.id);\r",
									"        await api.publishEvent(event.id);\r",
									"        \r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"const eid3 = parseInt(pm.collectionVariables.get(\"eid3\"));\r",
									"\r",
									"pm.test(\"Должно быть 1 событие в списке\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('title');\r",
									"pm.expect(target[0]).to.have.property('annotation');\r",
									"pm.expect(target[0]).to.have.property('category');\r",
									"pm.expect(target[0]).to.have.property('paid');\r",
									"pm.expect(target[0]).to.have.property('eventDate');\r",
									"pm.expect(target[0]).to.have.property('initiator');\r",
									"pm.expect(target[0]).to.have.property('views');\r",
									"pm.expect(target[0]).to.have.property('confirmedRequests');\r",
									"});\r",
									"\r",
									"pm.test(\"События должны быть в порядке убывания даты\", function () {\r",
									"pm.expect(target[0].id).eql(eid3);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{uid}}/subscriptions/events?from=0&size=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{uid}}",
								"subscriptions",
								"events"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addSubscription(userId, initiatorId, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/subscriptions/\" + initiatorId, \"{}\", \"Ошибка при добавлении новой подписки: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "iid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eid1",
			"value": "",
			"type": "string"
		},
		{
			"key": "eid2",
			"value": "",
			"type": "string"
		},
		{
			"key": "eid3",
			"value": "",
			"type": "string"
		}
	]
}